////////////// HOW TO COMMENT IN VERILOG

	Using double slash:
		// Here the comment
	
	Using this key /* */ like C language
		/* Here you can put your
		   comment and close whenever */

////////////// HOW TO SET THE TIME DELAY UNIT

	In the compiler directives (preambules): `timescale time/precision
		`timescale 1ns/10ps
	Without ";"

////////////// HOW TO CREATE A PORT ARRAY

	In the declaration use this syntaxis:
		<type:input, output, inout> [0:n] port_name;
	For example:
		output [0:3] Z;

////////////// HOW TO USE THE VERILOG MODULE DESIGN STYLES

	There are 4 styles which are explain by sections:
	-Dataflow Style.
	-Behavioral Style.
	-Structural Style.

////////////// HOW TO ASSIGN A PORT AS A REGISTER

	The registers retain the value until a new value is assign.

	It's possible to make a port as a register:
          ~Assign the type first:
                type port_name;
          ~Make it a register:
                reg port_name;

	Use the same name. Make it in the declarations and initial 
	statements sections.

////////////// HOW TO SPECIFY A DELAY FORM
	
        Delay is represented by the syntaxis '#n' where 'n' is the quantity
	of time units specified in the directives `timescale        

	There are two forms:
	-Inter-statement delay:
	  It is how long the statement's execution is delayed after the 
	  previous execution finish. Syntaxis:
	    [ delay ] LHS_net = RHS_expresion;
	  Example:
	  	#4 T1 = A + B;
  
	-Intra-statement delay:
	  It is the delay it takes to compute a value from RSH to LHS.
	  Example:
	  	T1 = #4 A + B;

////////////// HOW TO CREATE A SEQUENTIAL BLOCK

	These are loops which are executed when the conditional is true.
	
	In behavioral style the "always statements" are within a sequential
	blocks.

	The syntaxis is as follows:
		always
		@ (<conditional>) begin
		  <statement #1>;
		  <...>;
		  <statement #n>;
		end

////////////// HOW TO DO A GLOBAL AND LOCAL PARAMETERS/VARIABLES

	It is initialized and declared into a module (global variable) or 
	into block (local). It's not like a C Macro model, but I guess it 
	is just for numbers.
	Syntaxis:
		parameter NAME = NUMBER;
		reg REG_NAME;
		wire WIRE_NAME;

	To create a local parameter/variable (into a begin-end block) it's
	necessary to label the block. Syntaxis:
		begin: MY_LABEL
		  parameter my_local_prmtr = #;
		  reg my_local_reg;
		  ...
		end

////////////// HOW TO DO A MODULE INSTANCE

	It's used in structural style. First the module name and then
	the instance, all into a method. Syntaxis:
		module_name
		  instance_name1(port_out, port_in_1, ..., port_in_n),
		  ...
		  instance_name2(port_out, port_in_1, ..., port_in_n);

	Example:
		  xor
		    X1(S1, A, B),
		    X2(Sum, S1, Cin);
		  or
		    O1(Cout, T1, T2, T3);

	This logical modules are part of the standard libraries. It's
	possible to assign the module's arguments without the
	predeterminated order in the function.

////////////// HOW TO ASSIGN THE PORT WITHOUT ORDER INTO A MODULE INSTANCE

	For this, it's necessary to specify the arg name from the 
	original module declaration. Syntaxis:

		original_module_name
		  instance_name(.port_original_name(port));

	Example:
		// Original module
		module half_adder (A, B, Cout);
		...

		// Module instantiation
		half_adder
		  my_instance (.Cout(my_port_out), .A(my_port), .B(my_other_port));

////////////// HOW TO ___DATAFLOW STYLE___

	-Continuos statements (assignment)
		assign [ delay ] LHS_net = RHS_expression;
	 LHS: Left-hand side
	 RHS: Right-hand side

	-Uses "internal" wires for the module
		wire name_wire_1, name_wire_2;
	 It's not necessary to declare these wires as module's argument

////////////// HOW TO ___BEHAVIORAL STYLE___

	-Uses procedural constructs:
	  ~Initial statement: Once >Setup()
	  ~Always statement: Loop >Loop()
	This is like an Arduino code. Both statements begin in time 0 

	-Uses "internal" registers which retain the value until a new
	value has been assigned.

	-It's possible to make a port as a register:
	  ~Assign the type first:
	  	<type> port_name;
	  ~Make it a register:
	  	reg port_name;

////////////// HOW TO ___STRUCTURAL STYLE___

	-Interconnections are specified using nets (wires, regs, etc).

	-It uses module instances.

////////////// HOW TO SIMULATE A DESIGN

	Create a module that may have an empty port list (without inputs
	and outputs). It's a test module. Syntaxis:
		module Module_name;

	Stimulus and control can be generated using an inicial statement.
	Syntaxis:
		initial
		  begin
		    <statement>;
		    ...
		  end

////////////// HOW TO CREATE A LOOP
	
	There are a two ways to create a loop in Verilog:
	  ~FOR:
	    for (prmtr = #, <conditional>, prmtr = prmtr +- #)
	    begin
	      <statement #1>;
              <...>;
              <statement #n>;
	    end
	    
	  ~ALWAYS:
	    always
              @ (<conditional>) begin
                <statement #1>;
                <...>;
                <statement #n>;
              end

////////////// HOW TO DO A SYSTEM TASK
	
	This task are done using the symbol "$" and then the syntaxis of
	the task. It's possible to use a delay for this.

	~Print a string in console. It includes the new line:
		[ delay ] $display("Put the message here %b", param_name);

	~Print a string whenever a change occurs in some variable in
	the arguments list.
		$monitor("Put the number %b", param_1, " and %b", param_2);

	~Finish the stimulus module
		$finish

